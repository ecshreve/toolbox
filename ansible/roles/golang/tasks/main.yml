---
- name: Check if Go is already installed.
  ansible.builtin.stat:
    path: "{{ go_root }}/bin/go"
  register: go_stat

- name: Remove current installation.
  ansible.builtin.file:
    state: absent
    path: "{{ go_root }}"
  ignore_errors: "{{ ansible_check_mode }}"
  when: go_stat.stat.exists and clean

- name: Download Go.
  ansible.builtin.get_url:
    url: "{{ go_tarball_url }}"
    dest: /usr/local/src/{{ go_tarball }}
    checksum: "sha256:{{ golang_checksums[go_version_target][go_platform][go_arch] }}"
    mode: '0644'
  ignore_errors: "{{ ansible_check_mode }}"

- name: Extract Go.
  ansible.builtin.unarchive:
    src: /usr/local/src/{{ go_tarball }}
    dest: /usr/local
    copy: false
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Install go packages with go install.
  ansible.builtin.command:
    cmd: "{{ go_root }}/bin/go install {{ item.value }}"
    creates: "{{ go_root }}/bin/{{ item.key }}"
  environment:
    GOPATH: "{{ go_root }}"
    GOROOT: "{{ go_root }}"
  loop: "{{ go_packages | dict2items }}"
  ignore_errors: "{{ ansible_check_mode }}"
