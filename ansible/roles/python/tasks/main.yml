---
- name: Remove pyenv
  ansible.builtin.file:
    path: "{{ pyenv_root }}"
    state: absent
  when: clean

- name: Clone pyenv
  ansible.builtin.git:
    repo: https://github.com/pyenv/pyenv.git
    dest: "{{ pyenv_root }}"
    version: "{{ pyenv_version }}"

- name: Clone pyenv-virtualenv
  ansible.builtin.git:
    repo: https://github.com/pyenv/pyenv-virtualenv.git
    dest: "{{ pyenv_root }}/plugins/pyenv-virtualenv"
    version: "{{ pyenv_virtualenv_version }}"

- name: Set path to pyenv binary
  ansible.builtin.set_fact:
    pyenv_bin_path: "{{ pyenv_root }}/bin/pyenv"
  when: pyenv_bin_path is undefined

- name: Make sure .pyenv directory exists
  ansible.builtin.file:
    path: "{{ pyenv_root }}"
    state: directory
    mode: "0755"

- name: Install Python interpreters
  ansible.builtin.shell: >-
    {{ pyenv_bin_path }} install {{ item }}
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
    creates: "{{ pyenv_root }}/versions/{{ item }}/bin/python"
  loop: "{{ pyenv_python_versions }}"

- name: Get current global version
  ansible.builtin.shell: >-
    {{ pyenv_bin_path }} global
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  register: pyenv_global_version
  changed_when: false

- name: Set pyenv_global_active fact
  ansible.builtin.set_fact:
    pyenv_global_active: "{{ pyenv_global_version.stdout_lines |
      join(' ') | trim() }}"

- name: Set pyenv global version to '{{ pyenv_global }}'
  ansible.builtin.shell: >-
    {{ pyenv_bin_path }} global {{ pyenv_global }} &&
    {{ pyenv_bin_path }} rehash
  args:
    executable: "{{ pyenv_install_shell | default(omit) }}"
  changed_when: "pyenv_global is defined and pyenv_global_active != pyenv_global"
