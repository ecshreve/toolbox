[[task]]
  id = "clean:ansible"
  description = "Clean the project"
  type = "short"
  cmd = """
    rm -rf ./ansible/artifact
    rm -rf ./ansible/logs
    rm -rf ./ansible/log
  """

#-------------------------------------------------------------------------------
#  Go tasks -- these are general tasks for a Go project
#-------------------------------------------------------------------------------
[[task]]
  id = "go:dev"
  type = "long"
  description = "Run the Go application in development mode."
  dependencies = ["go:start"]
  cmd = """
    echo "Running development mode..."
    while true; do sleep 1; done
  """

[[task]]
  id = "go:start"
  type = "short"
  description = "Run the binary for the Go application."
  dependencies = ["go:build"]
  watch = ["bin/app"]
  cmd = """
    ./bin/app
  """

[[task]]
  id = "go:build"
  type = "short"
  description = "Build the binary for the Go application."
  watch = ["**/*.go"]
  cmd = """
    go build -o ./bin/app ./cmd/...
  """

[[task]]
  id = "go:test"
  type = "short"
  description = "Run all Go tests."
  cmd = """
    go test ./...
    echo "Testing complete."
  """

[[task]]
  id = "go:clean"
  type = "short"
  description = "Remove the binary and clean the Go test and module cache."
  cmd = """
    set -x

    rm -rf ./bin
    go clean -testcache
    go clean -modcache
  """

#-------------------------------------------------------------------------------
#  Project bootstrap task
#-------------------------------------------------------------------------------
[[task]]
  id = "bootstrap"
  type = "short"
  description = "Bootstrap a simple Go project in the current directory."
  cmd = """
    echo "ðŸ‘¢ Bootstrapping new project... ðŸ‘¢"

    # Check for required environment variable
    if [ -z "$GO_PROJECT_MODULE_PATH" ]; then
      echo "Required environment variables are not set."
      echo "Please set GO_PROJECT_MODULE_PATH in your environment."
      exit 1
    fi
    echo "âœ… Required environment variable set."

    # Check for existing Go module
    if [ -f go.mod ]; then
      echo "A Go module already exists in this directory."
      echo "Please remove the existing go.mod file before running this task."
      exit 1
    fi
    echo "âœ… No existing Go module."

    # Check for existing Go project
    if [ -d cmd/ ]; then
      echo "A Go project already exists in this directory."
      echo "Please remove the existing directory before running this task."
      exit 1
    fi
    echo "âœ… No existing Go project."

    # Extract the Go project name from the module path
    GO_PROJECT_NAME=$(echo $GO_PROJECT_MODULE_PATH | awk -F'/' '{print $NF}')
    echo "âœ… Extracted Go project name: $GO_PROJECT_NAME"
   
    # Create a new Go module and main.go file
    go mod init $GO_PROJECT_MODULE_PATH
    mkdir -p cmd/$GO_PROJECT_NAME
    touch cmd/$GO_PROJECT_NAME/main.go
    echo 'package main\n\nimport "fmt"\n\nfunc main() {\n\tfmt.Println("Hello, Run!")\n}' > cmd/$GO_PROJECT_NAME/main.go
    go mod tidy
    echo "âœ… Go module and main.go created."

    # Create a simple .gitignore if it doesn't exist.
    # Add bin/ and .env to .gitignore if they don't already exist.
    if [ -f .gitignore ]; then
      echo "A .gitignore file already exists in this directory."
      echo "Checking for existing entries..."
      if grep -q "bin/" .gitignore; then
        echo "bin/ already exists in .gitignore."
      else
        echo "Adding bin/ to .gitignore..."
        echo "bin/" >> .gitignore
      fi

    else
      echo "Creating .gitignore..."
      echo "bin/" > .gitignore
    fi
    echo "âœ… .gitignore check complete."

    # Create a simple README.md if it doesn't exist.
    if [ -f README.md ]; then
      echo "A README.md file already exists in this directory."
    else
      echo "Creating README.md..."
      echo "# $GO_PROJECT_NAME" > README.md
    fi
    echo "âœ… README.md check complete."

    echo "âœ… Bootstrap complete."
  """