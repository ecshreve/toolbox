name: ci

on:
  pull_request: 
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  LATEST_TAG: ghcr.io/ecshreve/toolbox:latest
  IMAGE_NAME: ghcr.io/ecshreve/toolbox

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      vtag: ${{ steps.set-docker-tag.outputs.vtag }}
      devtags: ${{ steps.set-docker-tag.outputs.devtags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up docker tags
        id: tag-docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,latest

      - name: Tag and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tag-docker.outputs.tags }}
          labels: ${{ steps.tag-docker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
      
      - name: Set docker tag output
        id: set-docker-tag
        run: |
          vtag=${{ github.ref_name }}
          devtags=latest
          if [[ $vtag != 'main' ]]; then
            $vtag=${vtag:1}
            $devtags=$devtags, $vtag
          fi
          echo "vtag=$vtag" >> "$GITHUB_OUTPUT"
          echo "devtags=$devtags" >> "$GITHUB_OUTPUT"

      - name: Set up devcontainer tags
        id: tag-devcon
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=semver,pattern={{version}}
            type=raw,latest

      - name: Pre-build dev container image
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.IMAGE_NAME }}-dev
          cacheFrom: ${{ env.IMAGE_NAME }}-dev
          configFile: .devcontainer/toolbox-dev/devcontainer.json
          imageTag: ${{ steps.tag-devcon.outputs.tags }}
          push: always

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/tags/v*.*.*'
    runs-on: ubuntu-latest
    steps:
      - name: Get Package URLs
        id: get_package_urls
        env:
          GHCR_TOKEN: ${{ secrets.GH_CUSTOM_PAT }}
          OWNER: ${{ github.repository_owner }}
        run: |
          #!/bin/bash
          AUTH_HEADER="Authorization: Bearer $GHCR_TOKEN"
          CONTENT_HEADER="Accept: application/vnd.github.v3+json"

          # Define your package names
          packages=("toolbox" "toolbox-dev")

          # Base URL for GHCR API
          PACKAGES_URL="https://api.github.com/user/packages/container"

          echo "Checking packages for untagged versions"
          for package_name in "${packages[@]}"; do
            echo "Checking package: $package_name"
           
            version_url=$(curl -s -H "$AUTH_HEADER" -H "$CONTENT_HEADER" "$PACKAGES_URL/$package_name/versions" | jq -r '.[] | select(.metadata.container.tags | contains([${{ inputs.version }}])) | .html_url')
            echo $package_name=$version_url >> $GITHUB_OUTPUT
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_CUSTOM_PAT }}
          tag_name: v${{ needs.build.outputs.vtag }}
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            [![toolbox](https://img.shields.io/badge/toolbox-${{ needs.build.outputs.vtag }}-blue)](${{ steps.get_package_urls.outputs.toolbox }}?tag=${{ needs.build.outputs.vtag }})
            [![toolbox-size](https://ghcr-badge.egpl.dev/ecshreve/toolbox/size?color=%235c62c9&tag=${{ needs.build.outputs.vtag }}&label=image+size&trim=)](${{ steps.get_package_urls.outputs.toolbox }}?tag=${{ needs.build.outputs.vtag }})

            ---

            [![toolbox-dev](https://img.shields.io/badge/toolbox_dev-${{ needs.build.outputs.vtag }}-blue)](${{ steps.get_package_urls.outputs.toolbox-dev }}?tag=${{ needs.build.outputs.vtag }})
            [![toolbox-dev-size](https://ghcr-badge.egpl.dev/ecshreve/toolbox-dev/size?color=%235c62c9&tag=${{ needs.build.outputs.vtag }}&label=image+size&trim=)](${{ steps.get_package_urls.outputs.toolbox-dev }}?tag=${{ needs.build.outputs.vtag }})

      

